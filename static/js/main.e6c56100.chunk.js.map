{"version":3,"sources":["actions.js","reducers.js","components/TodoForm.js","components/Link.js","containers/FilterLink.js","components/Footer.js","containers/AddTodo.js","components/Todo.js","components/TodoList.js","containers/VisibleTodoList.js","components/App.js","index.js"],"names":["ADD_TODO","TOGGLE_TODO","SET_VISIBILITY_FILTER","ADD_CHECKLISTCHILDREN","TOGGLE_CHECKLISTCHILDREN","VisibilityFilters","SHOW_ALL","nextTodoId","nextCheckListChildrenId","input","todoApp","combineReducers","visibilityFilter","state","action","type","filter","todos","id","text","completed","map","todo","Object","assign","checks","pId","parentComponentId","check","Link","active","children","onClick","e","preventDefault","FilterLink","connect","ownProps","dispatch","Footer","ButtonGroup","variant","color","aria-label","Button","TodoForm","onSubmit","value","trim","Grid","container","xs","md","item","style","paddingRight","TextField","fullWidth","placeholder","inputRef","node","AddTodo","addTodo","Todo","onTodoClick","onCheckClick","onCheckListSubmit","ListItem","button","ListItemIcon","nativeColor","green","CheckCompleted","ListItemText","TodoList","Paper","margin","List","key","getVisibleTodos","t","VisibleTodoList","toggleTodo","toggleCheckListChildren","addCheckListChildren","App","AppBar","position","Toolbar","Typography","Box","p","m","Container","maxWidth","padding","store","createStore","render","document","getElementById"],"mappings":"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","file":"static/js/main.e6c56100.chunk.js","sourcesContent":["//actionCreatorで生成されるactionの定義\n\n/*\n * action types\n */\n//タスク追加\nexport const ADD_TODO = 'ADD_TODO';\n//タスクの完了・未完了の切り替え\nexport const TOGGLE_TODO = 'TOGGLE_TODO';\n//タスク一覧をソート\nexport const SET_VISIBILITY_FILTER = 'SET_VISIBILITY_FILTER';\n//チェックリストの項目を追加\nexport const ADD_CHECKLISTCHILDREN = 'ADD_CHECKLISTCHILDREN';\n//チェックリストの項目の完了・未完了を切り替え\nexport const TOGGLE_CHECKLISTCHILDREN = 'TOGGLE_CHECKLISTCHILDREN';\n\n/*\n * other constants\n */\n//ソートフィルター一覧\nexport const VisibilityFilters = {\n  SHOW_ALL: 'SHOW_ALL',\n  SHOW_COMPLETED: 'SHOW_COMPLETED',\n  SHOW_ACTIVE: 'SHOW_ACTIVE'\n}\n\n/*\n * action creators\n */\n//textとtype:ADD_TODOを返す\nexport function addTodo(text) {\n  return { type: ADD_TODO, text };\n}\n//indexとtype:TOGGLE_TODOを返す\nexport function toggleTodo(id) {\n  return { type: TOGGLE_TODO, id };\n}\n//filterとSET_VISIBILITY_FILTERを返す\nexport function setVisibilityFilter(filter) {\n  return { type: SET_VISIBILITY_FILTER, filter };\n}\n//チェックリストに項目を追加\nexport function addCheckListChildren(parentComponentId,text){\n  return {type: ADD_CHECKLISTCHILDREN, parentComponentId, text};\n}\n//チェックリストの項目の完了・未完了を切り替え\nexport function toggleCheckListChildren(id){\n  return {type: TOGGLE_CHECKLISTCHILDREN, id};\n}","import { combineReducers } from 'redux'\nimport {\n  ADD_TODO,\n  TOGGLE_TODO,\n  SET_VISIBILITY_FILTER,\n  ADD_CHECKLISTCHILDREN,\n  TOGGLE_CHECKLISTCHILDREN,\n  VisibilityFilters\n} from './actions'\nconst { SHOW_ALL } = VisibilityFilters\n\nfunction visibilityFilter(state = SHOW_ALL, action) {\n  switch (action.type) {\n    case SET_VISIBILITY_FILTER:\n      return action.filter\n    default:\n      return state\n  }\n}\n\nlet nextTodoId = 0;\n\nfunction todos(state = [], action) {\n  switch (action.type) {\n    case ADD_TODO:\n      return [\n        ...state,\n        {\n          id: ++nextTodoId,\n          text: action.text,\n          completed: false,\n        }\n      ]\n    case TOGGLE_TODO:\n      return state.map((todo) => {\n        if (todo.id === action.id) {\n          return Object.assign({}, todo, {\n            completed: !todo.completed\n          })\n        }\n        return todo\n      })\n    default:\n      return state\n  }\n}\n\nlet nextCheckListChildrenId = 0;\n\nfunction checks(state = [], action){\n  switch(action.type){\n    case ADD_CHECKLISTCHILDREN:\n      return [\n        ...state,\n        {\n          pId: action.parentComponentId,\n          id: ++nextCheckListChildrenId,\n          text: action.text,\n          completed: false\n        }\n      ]\n    case TOGGLE_CHECKLISTCHILDREN:\n      return state.map((check) => {\n        if(check.id === action.id){\n          return Object.assign({}, check, {\n            completed: !check.completed\n          })\n        }\n        return check\n      }) \n    default :\n      return state\n  }\n}\n\nconst todoApp = combineReducers({\n  visibilityFilter,\n  todos,\n  checks\n})\n\nexport default todoApp","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport {Grid} from '@material-ui/core'\n\nlet input;\n\nconst TodoForm = ({onSubmit}) => (\n      <form\n        onSubmit={e => {\n          e.preventDefault()\n          if (!input.value.trim()) {\n            return\n          }\n          onSubmit(input.value.trim());\n          input.value = ''\n        }}\n      >\n        <Grid container>\n          <Grid xs={10} md={11} item style={{ paddingRight: 16 }}>\n            <TextField\n            fullWidth\n            placeholder=\"Enter your task\"\n            inputRef={node => {\n              input = node\n            }}\n            />\n          </Grid>\n          <Grid xs={2} md={1} item>\n            <Button variant=\"contained\" color=\"secondary\" type=\"submit\">\n            Add\n            </Button>\n          </Grid>\n        </Grid>\n      </form>\n);\n\n// TodoForm.PropTypes = {\n//   onSubmit: PropTypes.func.isRequired\n// }\n\nexport default TodoForm;","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Link = ({ active, children, onClick }) => {\n  if (active) {\n    return <span>{children}</span>\n  }\n\n  return (\n    <span\n      \n      onClick={e => {\n        e.preventDefault()\n        onClick()\n      }}\n    >\n      {children}\n    </span>\n  )\n}\n\nLink.propTypes = {\n  active: PropTypes.bool.isRequired,\n  children: PropTypes.node.isRequired,\n  onClick: PropTypes.func.isRequired\n}\n\nexport default Link","import { connect } from 'react-redux'\nimport { setVisibilityFilter } from '../actions'\nimport Link from '../components/Link'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    active: ownProps.filter === state.visibilityFilter\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onClick: () => {\n      dispatch(setVisibilityFilter(ownProps.filter))\n    }\n  }\n}\n\nconst FilterLink = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Link)\n\nexport default FilterLink","import React from 'react'\nimport FilterLink from '../containers/FilterLink'\nimport { VisibilityFilters } from '../actions'\nimport Button from '@material-ui/core/Button'\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\n\nconst Footer = () => (\n  <ButtonGroup variant=\"text\" color=\"primary\" aria-label=\"text primary button group\">\n    <Button>\n      <FilterLink filter={VisibilityFilters.SHOW_ALL}>All</FilterLink>\n    </Button>\n    <Button>\n      <FilterLink filter={VisibilityFilters.SHOW_ACTIVE}>Active</FilterLink>\n    </Button>\n    <Button>\n      <FilterLink filter={VisibilityFilters.SHOW_COMPLETED}>Completed</FilterLink>\n    </Button>\n  </ButtonGroup>\n)\n\nexport default Footer","import { connect } from 'react-redux'\nimport { addTodo } from '../actions'\nimport TodoForm  from '../components/TodoForm';\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSubmit: (text) => {\n      dispatch(addTodo(text))\n    }\n  }\n}\n\nconst AddTodo = connect(\n  null,\n  mapDispatchToProps\n  )(TodoForm)\n\nexport default AddTodo","import React from 'react';\nimport PropTypes from 'prop-types';\n// import CheckBox from './CheckBox';\nimport green from '@material-ui/core/colors/green'\nimport Done from '@material-ui/icons/Done'\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport CheckBoxOutlineBlank from '@material-ui/icons/CheckBoxOutlineBlank'\nimport ListItemText from '@material-ui/core/ListItemText'\n//import CheckList from './CheckList';\n\nlet buttonActivate = true;\n\nconst CheckCompleted = (completed) => {\n  if(completed){\n    return(\n      <ListItemIcon>\n        <Done nativeColor={green[500]} />\n      </ListItemIcon>\n    );\n  }else{\n    return (\n      <ListItemIcon>\n        <CheckBoxOutlineBlank />\n      </ListItemIcon>\n    );\n  }\n}\n\nconst Todo = ({pId, onTodoClick, completed, text, checks, onCheckClick, onCheckListSubmit}) => (\n  <ListItem\n    onClick={onTodoClick} \n    button={buttonActivate}\n    /* style={{\n      textDecoration: completed ? 'line-through' : 'none'\n    }} */\n  >\n    {/* <CheckBox onClick={onCheckBoxClick} completed={completed} />  */}\n    {CheckCompleted(completed)}\n    <ListItemText>\n      {text} \n    </ListItemText>\n    \n    {/* <br />\n    <CheckList \n    pComponentId={pId} \n    checks={checks} \n    onCheckClick={onCheckClick} \n    onCheckListSubmit={onCheckListSubmit} \n     /> */}\n  </ListItem>\n)\n\nTodo.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  completed: PropTypes.bool.isRequired,\n  text: PropTypes.string.isRequired\n}\n\nexport default Todo","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Todo from './Todo'\nimport {List, Paper} from '@material-ui/core'\n\nconst TodoList = ({ todos, checks, onTodoClick, onCheckClick, onCheckListSubmit }) => (\n  <Paper style={{ margin: 16 }}>\n    <List>\n      {todos.map((todo) => (\n        <Todo \n        key={todo.id} \n        text={todo.text} \n        completed={todo.completed} \n        onTodoClick={() => onTodoClick(todo.id)} \n        pId={todo.id}\n        checks={checks} \n        onCheckClick={onCheckClick} \n        onCheckListSubmit={onCheckListSubmit} \n        \n        />\n      ))}\n    </List>\n  </Paper>\n)\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n      text: PropTypes.string.isRequired\n    }).isRequired\n  ).isRequired,\n  onTodoClick: PropTypes.func.isRequired\n}\n\nexport default TodoList","import { connect } from 'react-redux'\nimport { toggleTodo, addCheckListChildren, toggleCheckListChildren } from '../actions'\nimport TodoList from '../components/TodoList'\n\nconst getVisibleTodos = (todos, filter) => {\n  switch (filter) {\n    case 'SHOW_ALL':\n      return todos\n    case 'SHOW_COMPLETED':\n      return todos.filter(t => t.completed)\n    case 'SHOW_ACTIVE':\n      return todos.filter(t => !t.completed)\n    default :\n      return todos\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    todos: getVisibleTodos(state.todos, state.visibilityFilter),\n    checks: state.checks\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onTodoClick: id => {\n      dispatch(toggleTodo(id));\n    },\n    onCheckClick: id => {\n      dispatch(toggleCheckListChildren(id));\n    },\n    onCheckListSubmit: (pId, text) => {\n      dispatch(addCheckListChildren(pId, text));\n    }\n  }\n}\n\nconst VisibleTodoList = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoList)\n\nexport default VisibleTodoList","import React from 'react';\nimport Footer from './Footer'\nimport AddTodo from '../containers/AddTodo'\nimport {Toolbar, Paper, Typography, AppBar, Container, Box} from '@material-ui/core'\n// import Toolbar from '@material-ui/core/Toolbar'\n// import Card from '@material-ui/core/Card'\n// import Typography from '@material-ui/core/Typography'\n// import AppBar from '@material-ui/core/AppBar'\n// import Container from '@material-ui/core/Container'\n// import Box from '@material-ui/core/Box'\nimport VisibleTodoList from '../containers/VisibleTodoList'\n\n// const useStyles = makeStyles({\n//   myContainer:{\n//     margin:48,\n//   },\n// });\n\nconst App = () => (\n  <div>\n    <AppBar color=\"primary\" position=\"relative\">\n      <Toolbar>\n        <Typography variant=\"title\">\n          TODO-DOIT\n        </Typography>\n      </Toolbar>\n    </AppBar>\n    <Box p={1} m={5}>\n      <Container maxWidth=\"md\">\n        <Paper style={{margin: 16, padding: 16}}>\n          <AddTodo />\n          <Footer />\n        </Paper>\n        <VisibleTodoList />\n      </Container>\n    </Box>\n  </div>\n)\n  \n\n\nexport default App;\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport todoApp from './reducers'\nimport './index.css'\nimport 'typeface-roboto'\nimport App from './components/App'\n\nconst store = createStore(todoApp)\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)"],"sourceRoot":""}